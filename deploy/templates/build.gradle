import groovy.text.SimpleTemplateEngine

def engine = new SimpleTemplateEngine()
def azureRepo = 'kryptioneastus.azurecr.io/'
def src = new File("${projectDir}/src/")

def setVersion(binding, template) {
    def fileProj = rootProject.findProject(":${template.name.take(template.name.lastIndexOf('.'))}")
    if (fileProj) {
        binding['version'] = fileProj.version.toString()
    }
}

task cleanAzure(type: Delete) {
    delete fileTree("${parent.projectDir}/azure") {
        include '*.yaml'
    }
}

task cleanLocal(type: Delete) {
    delete fileTree("${parent.projectDir}/local") {
        include '*.yaml'
    }
}

task azure() {
    dependsOn cleanAzure
    mustRunAfter cleanAzure

    doLast {
        def binding = ['repo'           : azureRepo,
                       'appReplicas'    : 2,
                       'lbtype'         : 'LoadBalancer',
                       'imagePullPolicy': 'IfNotPresent'
        ]

        src.listFiles().each { template ->
            setVersion(binding, template)
            def text = template.text
            def boundText = engine.createTemplate(text).make(binding)
            new File("${parent.projectDir}/azure/${template.name}").text = boundText
        }
    }
}

task local() {
    dependsOn cleanLocal
    mustRunAfter cleanLocal

    doLast {
        def binding = ['repo'           : '',
                       'appReplicas'    : 1,
                       'lbtype'         : 'NodePort',
                       'version'        : 'latest',
                       'imagePullPolicy': 'Always'
        ]

        src.listFiles().each { template ->
            def text = template.text
            def boundText = engine.createTemplate(text).make(binding)
            new File("${parent.projectDir}/local/${template.name}").text = boundText
        }
    }
}

task templates() {
    dependsOn azure, local
}
