import org.apache.tools.ant.taskdefs.condition.Os

def apps = ['service-registry', 'chat-service', 'authentication-service', 'api-gateway']

task installCertManager() {
    doLast {
        exec {
            commandLine 'helm', 'install', '--name', 'cert-manager', '--namespace', 'kube-system', 'stable/cert-manager'
        }
        exec {
            commandLine 'helm', 'install', '--name', 'cert-issuer', '--namespace', 'default', "${projectDir}/charts/cert-issuer"
        }
    }
}

task installNginxIngress() {
    doLast {
        exec {
            commandLine 'helm', 'install', '--name', 'nginx-ingress', '--namespace', 'kube-system', 'stable/nginx-ingress'
        }
    }
}

task installClusterDeps() {
    dependsOn installCertManager, installNginxIngress
}

task deployLocal() {
    dependsOn installCertManager
    mustRunAfter installCertManager

    doLast {
        apps.each { app ->
            def args = ['helm', 'install', '--name', "${app}", '--namespace', 'default', "${rootDir}/deploy/charts/${app}"]
            def valuesFile = new File("${rootDir}/deploy/local/${app}.yaml")
            def windowsValues = new File("${rootDir}/deploy/local/${app}-windows.yaml")

            if (windowsValues.exists() && Os.isFamily(Os.FAMILY_WINDOWS)) {
                args.addAll(['-f', "${rootDir}/deploy/local/${app}-windows.yaml"])
            } else if (valuesFile.exists()) {
                args.addAll(['-f', "${rootDir}/deploy/local/${app}.yaml"])
            }

            exec {
                commandLine args
            }
        }
    }
}

task deployAzure() {
    dependsOn installClusterDeps

    doLast {
        apps.each { app ->
            exec {
                commandLine 'helm', 'install', '--name', "${app}", '--namespace', 'default', '-f',
                        "${rootDir}/deploy/azure/values/${app}.yaml", "${rootDir}/deploy/charts/${app}"
            }
        }
    }
}
