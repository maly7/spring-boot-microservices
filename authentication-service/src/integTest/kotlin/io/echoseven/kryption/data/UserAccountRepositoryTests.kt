package io.echoseven.kryption.data

import io.echoseven.kryption.domain.UserAccount
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.ActiveProfiles
import org.springframework.test.context.junit4.SpringRunner
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

@RunWith(SpringRunner::class)
@ActiveProfiles("integration")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class UserAccountRepositoryTests {

    @Autowired
    lateinit var userAccountRepository: UserAccountRepository

    @Test
    fun `new user account creation`() {
        val userAccount = userAccountRepository.save(UserAccount("email@email.com", "password", false))

        assertNotNull(userAccount.createdDate, "new user accounts should have created dates")
        assertNotNull(userAccount.id, "The id should be generated by hibernate")
    }

    @Test
    fun `user account updating`() {
        val originalAccount = userAccountRepository.save(UserAccount("email@email.com", "password", false))
        val newPassword = "newer password"
        val newEmail = "new@email.com"

        originalAccount.password = newPassword
        originalAccount.isVerified = true
        originalAccount.email = newEmail

        val updatedAccount = userAccountRepository.save(originalAccount)

        assertEquals(originalAccount.id, updatedAccount.id, "The account id should not change")
        assertEquals(originalAccount.createdDate, updatedAccount.createdDate, "The created date should not change")
        assertEquals(newPassword, updatedAccount.password, "The password should update")
        assertEquals(newEmail, updatedAccount.email, "The email should be updated")
        assertTrue(updatedAccount.isVerified, "The account should now be verified")

    }
}