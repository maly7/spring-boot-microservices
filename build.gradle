import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.3.RELEASE'
        springCloudVersion = 'Finchley.RELEASE'
        dockerPluginVersion = '3.2.5'
        dockerRegistry = 'registry.gitlab.com/maly7/kryption-api/'
    }

    repositories {
        maven {
            url 'https://repo.spring.io/milestone/'
            name 'spring-milestones'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
            name 'gradle-plugins'
        }

        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath 'gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:3.2.0'
    }
}

allprojects {
    group 'io.echoseven.kryption'
    version '0.1.11'

    ext {
        envToLoad = ['MYSQL_USER', 'MYSQL_PASSWORD', 'MYSQL_ROOT_PASSWORD', 'MONGODB_USER',
                     'MONGODB_PASSWORD', 'RABBITMQ_USER', 'RABBITMQ_PASS', 'RABBITMQ_ERLANG_COOKIE']

        loadEnv = { env ->
            envToLoad.each {
                env.put("${it}".toString(), "${System.properties[it]}".toString())
            }
        }
    }
}

configure([project(':authentication-service'),
           project(':chat-service'),
           project(':service-registry'),
           project(':functional-tests'),
           project(':api-gateway'),
           project(':commons')]) {

    repositories {
        maven {
            url 'https://repo.spring.io/milestone/'
            name 'spring-milestones'
        }

        jcenter()
    }

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

configure([project(':authentication-service'),
           project(':chat-service'),
           project(':service-registry'),
           project(':functional-tests'),
           project(':api-gateway')]) {


    apply plugin: 'org.springframework.boot'

    sourceSets {
        integTest {
            kotlin {
                compileClasspath += main.output
                runtimeClasspath += main.output
            }
        }
    }

    configurations {
        integTestCompile.extendsFrom testCompile
        integTestRuntime.extendsFrom testRuntime
    }

    dependencyManagement {
        dependencies {
            dependency 'io.jsonwebtoken:jjwt:0.9.0'
            dependency 'commons-io:commons-io:2.6'
        }
    }

    dependencies {
        compile project(':commons')

        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.springframework.boot:spring-boot-configuration-processor'

        compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        compile 'org.jetbrains.kotlin:kotlin-reflect'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test'

        testCompile 'com.beust:klaxon:2.1.13'
        testCompile 'com.github.tomakehurst:wiremock-standalone:2.16.0'
    }

    task integTest(type: Test) {
        description = 'Run integration tests (located in src/integTest)'
        testClassesDirs = sourceSets.integTest.output.classesDirs
        classpath = sourceSets.integTest.runtimeClasspath
    }

    [bootRun, test, integTest]*.configure {
        systemProperties System.properties
    }

    check.dependsOn integTest
}

configure([project(':authentication-service'),
           project(':chat-service'),
           project(':service-registry'),
           project(':api-gateway')]) {
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'

    task writeEntrypoint() {
        doLast {
            new File("${projectDir}/entrypoint.sh").text =
                    """#!/bin/bash

keytool -import -trustcacerts -file /trusts/tls.crt -keystore trusts.jks -storepass \$TRUSTSTORE_PASSWORD -alias "Kryption Root CA" -noprompt
openssl pkcs12 -export -in /certs/tls.crt -inkey /certs/tls.key -CAfile /trusts/tls.crt -name "${project.name}" -passout pass:\$KEYSTORE_PASSWORD -out server.p12
exec java \$JAVA_OPTS -Djavax.net.ssl.trustStorePassword=\$TRUSTSTORE_PASSWORD -jar /app/${project.name}-${project.version}.jar
"""
        }
    }

    task writeDockerfile(type: Dockerfile) {
        destFile project.file('Dockerfile')
        from 'java:8'
        workingDir '/app'
        environmentVariable 'TRUSTSTORE_PASSWORD', 'secret'
        environmentVariable 'KEYSTORE_PASSWORD', 'secret'
        addFile("build/libs/${project.name}-${project.version}.jar", '/app')
        addFile("entrypoint.sh", "/")
        entryPoint("/entrypoint.sh")
    }

    writeDockerfile.dependsOn assemble, writeEntrypoint

    task dockerBuild() {
        dependsOn writeDockerfile
        doLast {
            exec {
                workingDir project.projectDir.path
                commandLine 'docker', 'build', '.', '-t', "${project.name}:${project.version}", '-t', "${project.name}:latest"
            }
        }
    }

    task reload() {
        doLast {
            exec {
                commandLine 'kubectl', 'delete', 'deploy', project.name
            }
            exec {
                commandLine 'kubectl', 'apply', '-f', "${rootProject.projectDir}/deploy/local/${project.name}.yaml"
            }
        }
    }
}

configure([project(':authentication-service'), project(':chat-service'), project(':service-registry'), project(':functional-tests')]) {
    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'
    }
}

task versionFile() {
    new File("version.txt").text = "APP_VERSION=${project.version}"
}

getTasksByName('deployLocal', true).each {
    it.dependsOn << getTasksByName('dockerBuild', true)
}
