import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
        dockerPluginVersion = '3.2.5'
        dockerRegistry = 'registry.gitlab.com/maly7/kryption-api/'
    }

    repositories {
        maven {
            url 'https://repo.spring.io/milestone/'
            name 'spring-milestones'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
            name 'gradle-plugins'
        }

        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}"
    }
}

allprojects {
    group 'com.gitlab.maly'
    version '1.0-SNAPSHOT'
}


subprojects {
    repositories {
        maven {
            url 'https://repo.spring.io/milestone/'
            name 'spring-milestones'
        }
        jcenter()
    }
}

configure([project(':user-api'), project(':document-store')]) {
    apply plugin: 'java'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        integTest {
            java {
                compileClasspath += main.output
                runtimeClasspath += main.output
            }
        }
    }

    configurations {
        integTestCompile.extendsFrom testCompile
        integTestRuntime.extendsFrom testRuntime
    }

    task integTest(type: Test) {
        description = 'Run integration tests (located in src/integTest)'
        testClassesDirs = sourceSets.integTest.output.classesDirs
        classpath = sourceSets.integTest.runtimeClasspath
    }

    [bootRun, test, integTest]*.configure {
        systemProperties System.properties
    }

    check.dependsOn integTest

    task writeDockerfile(type: Dockerfile) {
        destFile project.file('Dockerfile')
        from 'java:8'
        workingDir '/app'
        addFile("build/libs/${project.name}-${project.version}.jar", '/app')
        entryPoint('java', '-Xmx2000m', '-Djava.security.egd=file:/dev/./urandom', '-jar', "${project.name}-${project.version}.jar")
    }

    task buildDockerImage(type: Exec) {
        commandLine 'docker', 'build', '-t', "${dockerRegistry}${project.name}:${project.version}", "${writeDockerfile.destFile.parentFile.name}"
    }

    task publishDockerImage(type: Exec) {
        commandLine 'docker', 'push', "${dockerRegistry}${project.name}"
    }

    writeDockerfile.dependsOn assemble
    buildDockerImage.dependsOn writeDockerfile
    publishDockerImage.dependsOn buildDockerImage
}

task run(type: Exec) {
    dependsOn getTasksByName('writeDockerfile', true)

    environment 'MYSQL_USER', "${System.properties['MYSQL_USER']}"
    environment 'MYSQL_PASSWORD', "${System.properties['MYSQL_PASSWORD']}"
    environment 'MYSQL_ROOT_PASSWORD', "${System.properties['MYSQL_ROOT_PASSWORD']}"
    environment 'MONGODB_USER', "${System.properties['MONGODB_USER']}"
    environment 'MONGODB_PASSWORD', "${System.properties['MONGODB_PASSWORD']}"

    commandLine 'docker-compose', 'up', '-d', '--build'
}

task stop(type: Exec) {
    commandLine 'docker-compose', 'down'
}

run.mustRunAfter stop
