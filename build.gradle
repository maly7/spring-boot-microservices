import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        kotlinVersion = '1.2.41'
        springBootVersion = '2.0.1.RELEASE'
        springCloudVersion = 'Finchley.RC1'
        gatewayVersion = '2.0.0.RC1'
        dockerPluginVersion = '3.2.5'
        dockerRegistry = 'registry.gitlab.com/maly7/kryption-api/'
    }

    repositories {
        maven {
            url 'https://repo.spring.io/milestone/'
            name 'spring-milestones'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
            name 'gradle-plugins'
        }

        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath 'gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:3.2.0'
    }
}

allprojects {
    group 'io.echoseven.kryption'
    version '1.0-SNAPSHOT'
}


subprojects {
    repositories {
        maven {
            url 'https://repo.spring.io/milestone/'
            name 'spring-milestones'
        }

        jcenter()
    }

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    sourceSets {
        integTest {
            kotlin {
                compileClasspath += main.output
                runtimeClasspath += main.output
            }
        }
    }

    configurations {
        integTestCompile.extendsFrom testCompile
        integTestRuntime.extendsFrom testRuntime
    }

    dependencyManagement {
        dependencies {
            dependency 'io.jsonwebtoken:jjwt:0.9.0'
            dependency 'commons-io:commons-io:2.6'
        }

        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-gateway:${gatewayVersion}"
        }
    }

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-actuator'

        compile 'org.springframework.boot:spring-boot-configuration-processor'

        compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        compile 'org.jetbrains.kotlin:kotlin-reflect'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test'

        testCompile 'com.beust:klaxon:2.1.13'
        testCompile 'com.github.tomakehurst:wiremock-standalone:2.16.0'
    }

    task integTest(type: Test) {
        description = 'Run integration tests (located in src/integTest)'
        testClassesDirs = sourceSets.integTest.output.classesDirs
        classpath = sourceSets.integTest.runtimeClasspath
    }

    [bootRun, test, integTest]*.configure {
        systemProperties System.properties
    }

    check.dependsOn integTest
}

configure([project(':authentication-service'), project(':chat-service'), project(':service-registry'), project(':api-gateway')]) {
    apply plugin: 'org.jlleitschuh.gradle.ktlint'

    task writeDockerfile(type: Dockerfile) {
        destFile project.file('Dockerfile')
        from 'java:8'
        workingDir '/app'
        addFile("build/libs/${project.name}-${project.version}.jar", '/app')
        entryPoint('java', '-Xmx2000m', '-Djava.security.egd=file:/dev/./urandom', '-Dspring.profiles.active=cloud',
                '-jar', "${project.name}-${project.version}.jar")
    }

    writeDockerfile.dependsOn assemble
}

configure([project(':authentication-service'), project(':chat-service'), project(':service-registry')]) {
    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'
    }
}

task run(type: Exec) {
    dependsOn getTasksByName('writeDockerfile', true)

    environment 'MYSQL_USER', "${System.properties['MYSQL_USER']}"
    environment 'MYSQL_PASSWORD', "${System.properties['MYSQL_PASSWORD']}"
    environment 'MYSQL_ROOT_PASSWORD', "${System.properties['MYSQL_ROOT_PASSWORD']}"
    environment 'MONGODB_USER', "${System.properties['MONGODB_USER']}"
    environment 'MONGODB_PASSWORD', "${System.properties['MONGODB_PASSWORD']}"

    commandLine 'docker-compose', 'up', '-d', '--build'
}

task stop(type: Exec) {
    commandLine 'docker-compose', 'down'
}

run.mustRunAfter stop
