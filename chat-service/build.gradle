dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-amqp'

    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compile 'org.springframework.cloud:spring-cloud-starter-openfeign'

    compile 'org.apache.commons:commons-lang3'

    testRuntime 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'

    testCompile 'org.springframework.security:spring-security-test'
}

task dockerUp(type: Exec) {
    loadEnv(environment)

    commandLine 'docker-compose', 'up', '-d', '--build'
}

task dockerDown(type: Exec) {
    commandLine 'docker-compose', 'down'
}

task runRabbit(type: Exec) {
    commandLine 'docker-compose', '-f', 'rabbit-compose.yml', 'up', '-d', '--build'
}

task stopRabbit(type: Exec) {
    commandLine 'docker-compose', '-f', 'rabbit-compose.yml', 'down'
}

dockerUp.mustRunAfter dockerDown

writeDockerfile.exposePort 8280
bootRun.dependsOn dockerUp

if (Boolean.valueOf(System.properties['start.rabbit'].toString())) {
    integTest.dependsOn runRabbit
    integTest.finalizedBy stopRabbit
}

